# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# final.py
# Created on: 2020-02-21 00:25:36.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo
import sys
from pathlib import Path

# Import arcpy module
import arcpy
if arcpy.CheckExtension("3D") == "Available":  
    arcpy.CheckOutExtension("3D")  
    print "3D is enabled"
else:  
    print "3D Analyst license is unavailable" 

arcpy.env.overwriteOutput = True

# Set Geoprocessing environments
arcpy.env.scratchWorkspace = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\mine\\final2"
arcpy.env.workspace = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data"


def convert_coordinate_system(root):
    'This function, changes coordinate systems for all files in a folder'
    for in_file in root.glob('*/*.shp'):
        if 'out' in str(in_file):
            continue
        # Local variables:
        out_file = in_file.with_name ('out_' + in_file.name)
        if out_file.is_file():
             continue
    print "Processsing shapefile : " , in_file
        # Process: Project
    try:
            x = arcpy.Project_management(str(in_file), str(out_file), "PROJCS['NAD_1983_UTM_Zone_21N',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-57.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "", "PROJCS['NAD_1983_UTM_Zone_21N',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-57.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "NO_PRESERVE_SHAPE", "", "NO_VERTICAL")
            print x
            print out_file, ' created!'
      
    print 'Coordinates adjusted'


# # Process: Merge
park = r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\option\out_park.shp'
vacant = r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\option\out_vacant.shp'
all_option = r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\option\all_option.shp'
arcpy.Merge_management( "'%s';'%s'"%(park,vacant), all_option, "NO_SEQUENC \"NO_SEQUENC\" true true false 11 Double 0 11 ,First,#,str(park),NO_SEQUENC,-1,-1;CODE_USAGE \"CODE_USAGE\" true true false 3 Text 0 0 ,First,#,str(park),CODE_USAGE,-1,-1;USAG_DESCR \"USAG_DESCR\" true true false 100 Text 0 0 ,First,#,str(park),USAG_DESCR,-1,-1;PERIMETRE \"PERIMETRE\" true true false 19 Double 15 18 ,First,#,str(park),PERIMETRE,-1,-1,str(vacant),PERIMETRE,-1,-1;SUPERFICIE \"SUPERFICIE\" true true false 19 Double 15 18 ,First,#,str(vacant),SUPERFICIE,-1,-1,str(vacant),SUPERFICIE,-1,-1;NEAR_FID \"NEAR_FID\" true true false 10 Long 0 10 ,First,#,str(park),NEAR_FID,-1,-1;NEAR_DIST \"NEAR_DIST\" true true false 19 Double 0 0 ,First,#,str(park),NEAR_DIST,-1,-1;xcenter \"xcenter\" true true false 19 Double 0 0 ,First,#,str(park),xcenter,-1,-1;ycenter \"ycenter\" true true false 19 Double 0 0 ,First,#,.str(park),ycenter,-1,-1;area \"area\" true true false 19 Double 0 0 ,First,#,str(park),area,-1,-1;ARROND \"ARROND\" true true false 32 Text 0 0 ,First,#,str(vacant),ARROND,-1,-1")

print "end merge"


#   Euclidean Distance data
# Import arcpy module
import arcpy
if arcpy.CheckExtension("Spatial") == "Available":  
    arcpy.CheckOutExtension("Spatial")  
    print "Spatial is enabled"
else:  
    print "Spatial Analyst license is unavailable" 


root = Path(r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\to distance')
# print(root)

for in_file_distance in root.glob('*/out*.shp'):

    # Local variables:
    out_file_distance = in_file_distance.with_name('dis_' + in_file_distance.stem + '.tif')
    if out_file_distance.is_file():
        continue
    Output_direction_raster = in_file_distance.with_name(in_file_distance.stem + '_1'+ '.tif')
    if Output_direction_raster.is_file():
        continue
    Output_back_direction_raster =in_file_distance.with_name(in_file_distance.name + '_2'+ '.tif')
    if Output_back_direction_raster.is_file():
        continue

    print "euclideaning shapefile : " , in_file_distance
#   Process: Euclidean Distance
    arcpy.gp.EucDistance_sa(str(in_file_distance), str(out_file_distance), "", "50", str(Output_direction_raster), "PLANAR", "",str( Output_back_direction_raster))
print "end euclidean"



# reclass

for in_file_reclass in root.glob('*/dis_*.tif'):
  
    # Local variables:
    out_file_reclass = in_file_reclass.with_name('class_' + in_file_reclass.stem + '.tif')
    if out_file_reclass.is_file():
        continue
    print out_file_reclass
    
        #  reclass for school and flood zone
    if "school" in str(in_file_reclass) or 'flood' in str(in_file_reclass):
         arcpy.gp.Reclassify_sa(str(in_file_reclass), "VALUE", "0 500 1;500 1500 2;1500 2000 3;2000 2500 4;2500 1000000 5", str(out_file_reclass), "DATA")
    # reclass for others
    else:
        arcpy.gp.Reclassify_sa(str(in_file_reclass), "VALUE", "0 1000 1;1000 2000 2;2000 3000 3;3000 4000 4;4000 100000 5", str(out_file_reclass), "DATA")
print "end reclassify"

# Local variables:
class_dis_out_flood_risk_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\flood\\class_dis_out_flood risk.tif"
class_dis_out_lineriver_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\line river\\class_dis_out_lineriver.tif"
class_dis_out_government_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\gove\\class_dis_out_government.tif"
class_dis_out_mine_police_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\police\\class_dis_out_mine police.tif"
class_dis_out_school_final_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\school\\class_dis_out_school final.tif"
class_dis_out_worshipshp_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\worship\\class_dis_out_worshipshp.tif"
overlay_tif = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\overlay.tif"

# Process: Weighted Overlay
overlay= r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\overlay.tif'
arcpy.gp.WeightedOverlay_sa("('D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\flood\\class_dis_out_flood risk.tif' 10 'Value' (1 Restricted; 2 2; 3 3; 4 4; 5 5;NODATA NODATA); 'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\line river\\class_dis_out_lineriver.tif' 13 'Value' (1 5; 2 4; 3 3; 4 2; 5 1;NODATA NODATA); 'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\gove\\class_dis_out_government.tif' 7 'Value' (1 5; 2 4; 3 3; 4 2; 5 1;NODATA NODATA); 'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\police\\class_dis_out_mine police.tif' 20 'Value' (1 Restricted; 2 2; 3 3; 4 4; 5 5;NODATA NODATA); 'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\school\\class_dis_out_school final.tif' 40 'Value' (1 5; 2 4; 3 3; 4 2; 5 1;NODATA NODATA); 'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\to distance\\worship\\class_dis_out_worshipshp.tif' 10 'Value' (1 5; 2 4; 3 3; 4 2; 5 5;NODATA NODATA));1 9 1", str(overlay))

print "end overlay"

# Process: Raster to Polygon
tempEnvironment0 = arcpy.env.outputZFlag
arcpy.env.outputZFlag = "Disabled"
tempEnvironment1 = arcpy.env.outputMFlag
arcpy.env.outputMFlag = "Disabled"
overlayshape = r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\overlay.shp'
arcpy.RasterToPolygon_conversion(str(overlay), str(overlayshape), "SIMPLIFY", "Value", "SINGLE_OUTER_PART", "")
arcpy.env.outputZFlag = tempEnvironment0
arcpy.env.outputMFlag = tempEnvironment1
print "end creating shapefile"


# Local variables:
overlay_shp = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\overlay.shp"
input_file = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file"
score5 = "score5"

# Process: Make Feature Layer
arcpy.MakeFeatureLayer_management(overlay_shp, score5, "\"gridcode\" = 5", input_file, "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;Id Id VISIBLE NONE;gridcode gridcode VISIBLE NONE")
print "end creating layer score5"

 
# Local variables: Select Layer By Location
all_option = "all_option"
all_option__2_ = all_option
v5score = "D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\input file\\score52.shp"

# Process: Select Layer By Location
arcpy.SelectLayerByLocation_management(all_option, "INTERSECT", v5score, "", "NEW_SELECTION", "NOT_INVERT")
print "selesction done"

# Process: Copy Features
arcpy.CopyFeatures_management(out_park_1500_Merge__3_, park_with_5_score2_shp, "selected", "0", "0", "0")

# Process: Add Geometry Attributes
arcpy.AddGeometryAttributes_management(park_with_5_score2, "AREA", "METERS", "SQUARE_METERS", "PROJCS['NAD_1983_UTM_Zone_21N',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-57.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

# Process: Select Layer By Attribute
arcpy.SelectLayerByAttribute_management(park_with_5_score2__2_, "NEW_SELECTION", "\"Shape_Area\" >1500")

# Process: Copy Features (2)
arcpy.CopyFeatures_management(park_with_5_score2__4_, parkwith5scoreover1500_shp, "", "0", "0", "0")

# Process: Feature To Point
arcpy.FeatureToPoint_management(parkwith5scoreover1500_shp, point1500score5_shp, "CENTROID")

# Process: Add XY Coordinates
arcpy.AddXY_management(point1500score5_shp)

# Process: Mosaic To New Raster
arcpy.MosaicToNewRaster_management("'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\DEM\\021l14_0200_deme.dem';'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\DEM\\021l14_0200_demw.dem'", DEM, "alldem.tif", "", "8_BIT_UNSIGNED", "", "1", "LAST", "FIRST")

# Process: Add Surface Information
arcpy.AddSurfaceInformation_3d(point1500score5_shp__2_, alldem_tif, "Z", "BILINEAR", "", "1", "0", "NO_FILTER")

# Process: Near 3D
arcpy.Near3D_3d(point1500score5_shp__3_, "'D:\\OneDrive\\Mahdiyeh\\my course 2\\gis\\small project\\data\\Shapefiles\\line river\\out_lineriver.shp'", "", "NO_LOCATION", "NO_ANGLE", "NO_DELTA")

# Create the search cursor
alternatives = Path(r':\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\2final_empty.shp')
schools = Path(r'D:\OneDrive\Mahdiyeh\my course 2\gis\small project\data\Shapefiles\input file\to distance\school\out_school final.shp')

# Iterate through the rows in the cursor
alt_info_set = []
nearest_school_set = []
for row in arcpy.SearchCursor(alternatives):
    print(row.FID, row.Z, row.FID_1)
    alt_info_set.append( [row.FID, row.Z, row.FID_1] )
    nearest_school_set.append(row.FID_1)

for row in arcpy.SearchCursor(schools, 'FID in ' + str(tuple(nearest_school_set))):
    print(row.FID, row.Z, row.NOM_OFFCL)
    for alt in alt_info_set:
        if alt[2] == row.FID:
            alt.append(row.Z)

diff_z = []
for alt in alt_info_set:
    diff_z.append( (abs(alt[1] - alt[3]), alt[0]))

print 'list of ISIS camps sorted on difference in eleveation'
for alt in sorted(diff_z):
    print 'camp option: ', alt[1], 'elevation in tunnel: ', alt[0]